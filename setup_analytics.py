import os
from pathlib import Path

# --- Contenido de los archivos que vamos a crear ---

# Contenido para src/lib/gtag.js
GTAG_JS_CONTENT = """
/**
 * @file src/lib/gtag.js
 * Este archivo centraliza la lógica para enviar eventos a Google Analytics.
 * Así evitamos repetir código y lo mantenemos organizado.
 */

// ¡MUY IMPORTANTE! Reemplaza esto con tu propio ID de Medición de Google Analytics 4.
export const GA_TRACKING_ID = "G-XXXXXXXXXX";

/**
 * Envía un evento personalizado a Google Analytics.
 * @param {string} eventName - El nombre del evento que definiste (ej. 'start_application').
 * @param {object} [eventParams={}] - Parámetros adicionales que quieras enviar con el evento.
 */
export const sendEvent = (eventName, eventParams = {}) => {
  // Nos aseguramos de que `gtag` esté disponible en el navegador antes de usarlo.
  if (typeof window.gtag === 'function') {
    console.log(`Sending event: ${eventName}`, eventParams); // Útil para depurar
    window.gtag('event', eventName, eventParams);
  } else {
    console.warn(`Google Analytics no está cargado. No se envió el evento: ${eventName}`);
  }
};
"""

# Contenido para src/app/layout.js (sobrescribirá el archivo existente)
LAYOUT_JS_CONTENT = """
import { Inter } from "next/font/google";
import "./globals.css";
import Script from 'next/script'; // Importa el componente Script de Next.js
import { GA_TRACKING_ID } from '../lib/gtag'; // Importa tu ID de seguimiento

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "izmanagement",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="es">
      {/* Scripts de Google Analytics
        Se cargan de forma asíncrona usando la estrategia recomendada por Next.js
        para no bloquear el renderizado de la página.
      */}
      <Script
        strategy="afterInteractive"
        src={`https://www.googletagmanager.com/gtag/js?id=${GA_TRACKING_ID}`}
      />
      <Script
        id="gtag-init"
        strategy="afterInteractive"
        dangerouslySetInnerHTML={{
          __html: `
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', '${GA_TRACKING_ID}', {
              page_path: window.location.pathname,
            });
          `,
        }}
      />
      <body className={inter.className}>{children}</body>
    </html>
  );
}
"""

# Contenido para src/components/AnalyticsExample.js
ANALYTICS_EXAMPLE_CONTENT = """
'use client'; // Necesario para usar hooks como useState y onClick

import { useState } from 'react';
import { sendEvent } from '../lib/gtag'; // ¡Importamos nuestra función mágica!

/**
 * Este es un componente de EJEMPLO.
 * NO lo uses directamente en producción.
 * Su propósito es mostrarte CÓMO llamar a `sendEvent` en cada acción.
 * Debes copiar esta lógica a TUS PROPIOS componentes.
 */
export default function AnalyticsExample() {
  const [step, setStep] = useState(1);
  const [photoCount, setPhotoCount] = useState(0);

  // --- Evento: start_application ---
  const handleStartApplication = () => {
    sendEvent('start_application');
    alert("Evento 'start_application' enviado. Normalmente, aquí navegarías al formulario.");
  };

  // --- Evento: complete_step1 ---
  const handleGoToStep2 = () => {
    sendEvent('complete_step1');
    setStep(2);
  };

  // --- Evento: upload_photos_complete ---
  const handlePhotoUpload = () => {
    const newCount = photoCount + 1;
    setPhotoCount(newCount);
    if (newCount === 3) {
      sendEvent('upload_photos_complete');
      alert("Evento 'upload_photos_complete' enviado (3 fotos subidas).");
    }
  };
  
  // --- Evento: upload_video ---
  const handleVideoUpload = () => {
    sendEvent('upload_video');
    alert("Evento 'upload_video' enviado.");
  };

  // --- Eventos: attempt_submission y submit_application ---
  const handleFinalSubmit = (event) => {
    event.preventDefault();
    sendEvent('attempt_submission');
    // Simula una llamada a tu backend que tiene éxito
    const isSuccess = true; 
    if (isSuccess) {
      sendEvent('submit_application');
      alert("Eventos 'attempt_submission' y 'submit_application' enviados.");
    }
  };

  return (
    <div className="p-8 max-w-2xl mx-auto bg-gray-900 text-white rounded-lg shadow-lg font-sans">
      <h1 className="text-3xl font-bold mb-6 text-center">Ejemplo de Tracking de Eventos</h1>
      
      <div className="space-y-6">
        {/* 1. Botón de Inicio (para la página principal) */}
        <div className="p-4 border border-gray-700 rounded-md bg-gray-800">
          <p className="font-semibold mb-2">1. En tu página de inicio:</p>
          <button onClick={handleStartApplication} className="w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 transition-colors">Aplicar Ahora (start_application)</button>
        </div>

        {/* 2. Formulario Multi-paso */}
        <div className="p-4 border border-gray-700 rounded-md bg-gray-800">
          <p className="font-semibold mb-2">2. En el Paso 1 del formulario:</p>
          <button onClick={handleGoToStep2} disabled={step !== 1} className="w-full bg-green-600 text-white py-2 rounded-md hover:bg-green-700 transition-colors disabled:bg-gray-600">Completar Paso 1 (complete_step1)</button>
        </div>

        {/* 3. Subida de Archivos */}
        <div className="p-4 border border-gray-700 rounded-md bg-gray-800">
          <p className="font-semibold mb-2">3. En la sección de subida de archivos:</p>
          <div className="flex space-x-4">
            <button onClick={handlePhotoUpload} disabled={photoCount >= 3} className="flex-1 bg-purple-600 text-white py-2 rounded-md hover:bg-purple-700 transition-colors disabled:bg-gray-600">Subir Foto (upload_photos_complete al 3ro)</button>
            <button onClick={handleVideoUpload} className="flex-1 bg-yellow-500 text-black py-2 rounded-md hover:bg-yellow-600 transition-colors">Subir Video (upload_video)</button>
          </div>
          <p className="text-center mt-2 text-sm text-gray-400">Fotos subidas: {photoCount}</p>
        </div>

        {/* 4. Envío Final */}
        <div className="p-4 border border-gray-700 rounded-md bg-gray-800">
          <p className="font-semibold mb-2">4. Al final del formulario:</p>
          <form onSubmit={handleFinalSubmit} className="flex flex-col">
            <button type="submit" className="w-full bg-red-600 text-white py-2 rounded-md hover:bg-red-700 transition-colors">Finalizar Aplicación (attempt & submit)</button>
          </form>
        </div>
      </div>
    </div>
  );
}
"""

# --- Lógica del Script ---

def main():
    """Función principal que ejecuta todas las operaciones."""
    project_root = Path.cwd()
    print(f"Ejecutando script en el directorio del proyecto: {project_root}")

    # Definir rutas
    lib_dir = project_root / "src" / "lib"
    components_dir = project_root / "src" / "components"
    gtag_file = lib_dir / "gtag.js"
    layout_file = project_root / "src" / "app" / "layout.js"
    example_file = components_dir / "AnalyticsExample.js"

    try:
        # 1. Crear directorios si no existen
        lib_dir.mkdir(parents=True, exist_ok=True)
        components_dir.mkdir(parents=True, exist_ok=True)
        print(f"Directorios '{lib_dir}' y '{components_dir}' asegurados.")

        # 2. Crear src/lib/gtag.js
        gtag_file.write_text(GTAG_JS_CONTENT, encoding='utf-8')
        print(f"✅ Archivo creado: {gtag_file}")

        # 3. Sobrescribir src/app/layout.js
        layout_file.write_text(LAYOUT_JS_CONTENT, encoding='utf-8')
        print(f"✅ Archivo sobrescrito: {layout_file}")

        # 4. Crear src/components/AnalyticsExample.js
        example_file.write_text(ANALYTICS_EXAMPLE_CONTENT, encoding='utf-8')
        print(f"✅ Archivo de ejemplo creado: {example_file}")

        print("\n--- ¡Proceso completado! ---")
        print("\nPróximos pasos:")
        print("1. Abre 'src/lib/gtag.js' y REEMPLAZA 'G-XXXXXXXXXX' con tu ID de Google Analytics.")
        print("2. Revisa el ejemplo en 'src/components/AnalyticsExample.js'.")
        print("3. Aplica la lógica de ese ejemplo a TUS PROPIOS componentes del formulario.")
        print("4. Inicia tu servidor de desarrollo (`npm run dev`) y prueba los eventos.")

    except Exception as e:
        print(f"\n❌ Ocurrió un error: {e}")
        print("No se completaron todos los cambios. Revisa el mensaje de error.")

if __name__ == "__main__":
    main()
